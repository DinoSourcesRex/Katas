// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.1.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace RoverExercise.Tests.Acceptance.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Navigate Mars")]
    public partial class NavigateMarsFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Navigate Mars.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Navigate Mars", "\tIn order to successfully navigate Mars\r\n\tAs a driver\r\n\tI want to be able to send" +
                    " commands to the Rover", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Will the Rover successfully accept 5 commands")]
        public virtual void WillTheRoverSuccessfullyAccept5Commands()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Will the Rover successfully accept 5 commands", ((string[])(null)));
#line 6
this.ScenarioSetup(scenarioInfo);
#line 7
 testRunner.Given("Mars has an area of x:100 by y:100 split into 100 sectors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 8
  testRunner.And("The Rover starts at position x:1 y:1 facing South", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Direction",
                        "Distance"});
            table1.AddRow(new string[] {
                        "Forward",
                        "50"});
            table1.AddRow(new string[] {
                        "Left",
                        "0"});
            table1.AddRow(new string[] {
                        "Forward",
                        "23"});
            table1.AddRow(new string[] {
                        "Left",
                        "0"});
            table1.AddRow(new string[] {
                        "Forward",
                        "4"});
#line 9
  testRunner.And("The following commands", ((string)(null)), table1, "And ");
#line 16
 testRunner.When("I execute the commands", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 17
 testRunner.Then("the rover should arrive at sector 4624 with coordinates x:24 y:47 facing North", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Will the Rover successfully ignore excess commands")]
        public virtual void WillTheRoverSuccessfullyIgnoreExcessCommands()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Will the Rover successfully ignore excess commands", ((string[])(null)));
#line 19
this.ScenarioSetup(scenarioInfo);
#line 20
 testRunner.Given("Mars has an area of x:100 by y:100 split into 100 sectors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 21
  testRunner.And("The Rover starts at position x:1 y:1 facing South", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Direction",
                        "Distance"});
            table2.AddRow(new string[] {
                        "Forward",
                        "50"});
            table2.AddRow(new string[] {
                        "Left",
                        "0"});
            table2.AddRow(new string[] {
                        "Forward",
                        "23"});
            table2.AddRow(new string[] {
                        "Left",
                        "0"});
            table2.AddRow(new string[] {
                        "Forward",
                        "4"});
            table2.AddRow(new string[] {
                        "Forward",
                        "4"});
            table2.AddRow(new string[] {
                        "Forward",
                        "4"});
            table2.AddRow(new string[] {
                        "Forward",
                        "4"});
#line 22
  testRunner.And("The following commands", ((string)(null)), table2, "And ");
#line 32
 testRunner.When("I execute the commands", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 33
 testRunner.Then("the rover should arrive at sector 4624 with coordinates x:24 y:47 facing North", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Will the Rover successfully ignore unsafe commands")]
        public virtual void WillTheRoverSuccessfullyIgnoreUnsafeCommands()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Will the Rover successfully ignore unsafe commands", ((string[])(null)));
#line 35
this.ScenarioSetup(scenarioInfo);
#line 36
 testRunner.Given("Mars has an area of x:100 by y:100 split into 100 sectors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 37
  testRunner.And("The Rover starts at position x:1 y:1 facing South", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Direction",
                        "Distance"});
            table3.AddRow(new string[] {
                        "Forward",
                        "46"});
            table3.AddRow(new string[] {
                        "Left",
                        "0"});
            table3.AddRow(new string[] {
                        "Forward",
                        "23"});
            table3.AddRow(new string[] {
                        "Forward",
                        "100"});
#line 38
  testRunner.And("The following commands", ((string)(null)), table3, "And ");
#line 44
 testRunner.When("I execute the commands", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 45
 testRunner.Then("the rover should arrive at sector 4624 with coordinates x:24 y:47 facing East", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
